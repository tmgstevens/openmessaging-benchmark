#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: Collect profiles
  hosts: client
  become: true
  tags:
    - ["never", "profile"]
  tasks:
    - set_fact:
        time: "{{ ansible_date_time.epoch }}"
    - name: Generate Flame graph
      tags:
        - flame
      shell: |
        /tmp/profiler.sh -d 120 `pidof java` -f /tmp/flame.svg
    - name: Fetch flame graph
      tags:
        - flame
      fetch:
        src: /tmp/flame.svg
        dest: results/{{ group_names[0] }}/{{ time }}/{{ inventory_hostname }}/flame.svg
        flat: yes

    - name: Heap allocation profile
      tags:
        - heap
      shell: |
        /tmp/profiler.sh -d 60 -e alloc -o svg -f /tmp/heap.svg 1 `pidof java`
        chmod 777 /tmp/heap.svg
    - name: Fetch heap dump
      tags:
        - heap
      fetch:
        src: /tmp/heap.svg
        dest: results/{{ group_names[0] }}/{{ time }}/{{ inventory_hostname }}/heap.svg
        flat: yes

- name: Store server lists
  hosts: all
  connection: ssh
  tasks:
    - set_fact:
        zookeeperServers: "{{ groups['all'] | map('extract', hostvars, ['zookeeperServers']) }}"
        boostrapServers: "{{ groups['all'] | map('extract', hostvars, ['boostrapServers']) }}"

- name: Setup common packages
  hosts: all
  connection: ssh
  become: true
  tasks:
    - name: Remove sysstat
      yum: pkg={{ item }} state=absent
      with_items:
        - sysstat
    - name: Install RPM packages
      yum: pkg={{ item }} state=latest
      with_items:
        - wget
        - java-11
        - sysstat
        - vim
        - chrony
        - git
        - gcc
        - make

- name: Chrony setup
  hosts: client
  connection: ssh
  become: true
  tasks:
    - name: Set up chronyd
      template:
        src: "templates/chrony.conf"
        dest: "/etc/chrony.conf"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "chronyd"

- name: Setup Benchmark client
  hosts: client
  connection: ssh
  become: true
  tasks:
    - file: path=/opt/benchmark state=absent
    - name: Copy benchmark code
      unarchive:
        src: ../../package/target/openmessaging-benchmark-0.0.1-SNAPSHOT-bin.tar.gz
        dest: /opt
    - shell: mv /opt/openmessaging-benchmark-0.0.1-SNAPSHOT /opt/benchmark
    - shell: tuned-adm profile latency-performance

    - name: Get list of driver config files
      raw: ls -1 /opt/benchmark/driver-kafka/*.yaml
      register: drivers_list

    - name: Configure URL
      lineinfile:
        dest: "{{ item }}"
        regexp: "^  bootstrap.servers="
        line: "  bootstrap.servers={{ boostrapServers }}"
      with_items: "{{ drivers_list.stdout_lines }}"
    - name: Configure memory
      lineinfile:
        dest: /opt/benchmark/bin/benchmark-worker
        regexp: "^JVM_MEM="
        line: 'JVM_MEM="-Xms16G -Xmx16G -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+AggressiveOpts -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=32 -XX:ConcGCThreads=32 -XX:G1NewSizePercent=50 -XX:+DisableExplicitGC -XX:-ResizePLAB -XX:+PerfDisableSharedMem -XX:+AlwaysPreTouch -XX:-UseBiasedLocking"'
    - name: Configure memory
      lineinfile:
        dest: /opt/benchmark/bin/benchmark
        regexp: "^JVM_MEM="
        line: 'JVM_MEM="-Xmx1G"'
    - name: Setup JMX for Producer/Consumer clients
      copy:
        src: "monitoring/jmx_exporter/jmx_prometheus_javaagent-0.13.0.jar"
        dest: "/opt/benchmark/jmx_prometheus_javaagent-0.13.0.jar"
    - name: Configure JMX for Prometheus (Client)
      template:
        src: "monitoring/jmx_exporter/client.yml"
        dest: "/opt/benchmark/metrics.yml"
    - template:
        src: "templates/workers.yaml"
        dest: "/opt/benchmark/workers.yaml"
    - name: Install benchmark systemd service
      template:
        src: "templates/benchmark-worker.service"
        dest: "/etc/systemd/system/benchmark-worker.service"
    - name: "Restart benchmark worker"
      tags:
        - configure
      systemd:
        state: restarted
        daemon_reload: yes
        name: "benchmark-worker"

- name: Hosts addresses
  hosts: localhost
  become: false
  tasks:
    - debug:
        msg: "Benchmark clients {{ item }}"
      with_items: "{{ groups['client'] }}"

- hosts: prometheus
  roles: 
  - cloudalchemy.grafana
  vars:
    grafana_version: 6.7.3
    grafana_security:
      admin_user: admin
      admin_password: enter_your_secure_password
    grafana_datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      url: 'http://localhost:9090'
      basicAuth: false
    grafana_dashboards:
    - dashboard_id: 1860
      revision_id: 21
      datasource: prometheus


- name: Install jattach and async-profiler
  hosts: all
  become: true
  tasks:
    - name: Download and extract async-profiler
      unarchive:
        src: https://github.com/jvm-profiling-tools/async-profiler/releases/download/v1.7.1/async-profiler-1.7.1-linux-x64.tar.gz
        dest: /tmp
        remote_src: yes

    - name: Download and install jattach
      get_url:
        url: https://github.com/apangin/jattach/releases/download/v1.5/jattach
        dest: /usr/bin/jattach
        mode: "0755"
